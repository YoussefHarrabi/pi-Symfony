

{% extends 'baseModerna.html.twig' %}
{% block title %}Incident index{% endblock %}

{% block content %}
<section class="services">
    <div class="container">
        <!-- Search input and Create new button -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <button type="button" onclick="location.href='{{ path('app_incident_new') }}'"  class="btn btn-primary">ADD</button>
        </div>
       <form method="get" action="{{ path('app_incident_index') }}" class="form-inline justify-content-center mb-3">
    <div class="form-group mb-2 mr-sm-2">
        <input type="text" name="search" class="form-control" placeholder="Search by type" value="{{ app.request.query.get('search') }}">
    </div>
    <button type="submit" class="btn btn-primary mb-2">Search</button>
</form>
        <div class="text-center mb-3">
            <p>Rush hour for incidents: <span id="rushHour">{{ rushHour }}</span></p>
        </div>

        <div class="row">
            {% set colors = ['pink', 'cyan', 'green', 'blue'] %}
            {% set colorIndex = 0 %}
            {% for incident in incidents %}
                {% set currentDate = "now"|date('Y-m-d') %}
                {% set incidentDate = incident.date ? incident.date|date('Y-m-d') : '' %}
                {% if incidentDate == currentDate %}
                    {% set currentTime = "now"|date('U') %}
                    {% set incidentTime = incident.hour ? incident.hour|date('U') : 0 %}
                    {% if currentTime - incidentTime <= 1800 %}
                        {% set colorClass = colors[colorIndex] %}
                        {% set colorIndex = (colorIndex + 1) % colors|length %}
                        <div class="col-md-6 col-lg-3 d-flex align-items-stretch" data-aos="fade-up">
                            <div class="icon-box icon-box-{{ colorClass }}">
                                <div class="icon"><i class="openmoji--warning-strip-right"></i></div>
                                <h4>{{ incident.type }}</h4>
                                <p class="description">{{ incident.description }}</p>
                                <p class="card-text">Place: {{ incident.place }}</p>
                                <p class="card-text">Hour: {{ incident.hour ? incident.hour|date('H:i') : '' }}</p>
                                <p class="card-text">Date: {{ incident.date ? incident.date|date('Y-m-d') : '' }}</p>
                                <br>
                                <div style="display: inline-block;">
                                    <a href="{{ path('app_incident_edit', {'id': incident.IncidentId}) }}"><i class="bx bx-edit bx-sm" style="color: green;"></i></a>&nbsp;
                                </div>
                                <div style="display: inline-block;">
                                    <form action="{{ path('app_incident_delete', {'id': incident.IncidentId}) }}" method="post" onsubmit="return confirm('Are you sure you want to delete this incident?')">
                                        <input type="hidden" name="_method" value="DELETE">
                                        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ incident.IncidentId) }}">
                                        <button type="submit" class="btn" style="color: red;"><i class="bx bx-trash bx-sm"></i></button>
                                    </form>
                                </div>
                                <div style="display: inline-block;">
                                    <a href="{{ path('app_incident_show', {'id': incident.IncidentId}) }}"><i class="bx bx-info-circle bx-sm"></i></a>
                                </div>
                                <div>
                                    <h5>
                                        <a href="#" title="Click to report" class="card-title" style="color:black;" onclick="confirmReport('{{ incident.IncidentId }}')" data-incident-id="{{ incident.IncidentId }}">Report</a>
                                    </h5>
                                </div>
                            </div>
                        </div>
                    {% endif %}
                {% endif %}
            {% endfor %}
        </div>
<!-- Pagination -->
        <div class="d-flex justify-content-center mt-4">
            {{ knp_pagination_render(incidents) }}
        </div>
        <form action="{{ path('generate_excel') }}" method="post">
            <input type="hidden" name="_token" value="{{ csrf_token('generate_excel') }}">
            <button type="submit" class="btn" style="border: 1px solid black;">Generate excel</button>
        </form>

        
    </div>
</section><!-- End Services Section -->



<style>
    /* Set a fixed height for the card */
    .icon-box {
        min-height: 400px; 
        min-width: 300px;
    }
    .openmoji--warning-strip-right {
  display: inline-block;
  width: 1em;
  height: 1em;
  --svg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 36 36'%3E%3Cpath fill='%23000' d='M30.33 25.54L20.59 7.6a3 3 0 0 0-5.27 0L5.57 25.54A3 3 0 0 0 8.21 30h19.48a3 3 0 0 0 2.64-4.43Zm-13.87-12.8a1.49 1.49 0 0 1 3 0v6.89a1.49 1.49 0 1 1-3 0ZM18 26.25a1.72 1.72 0 1 1 1.72-1.72A1.72 1.72 0 0 1 18 26.25' class='clr-i-solid clr-i-solid-path-1'/%3E%3Cpath fill='none' d='M0 0h36v36H0z'/%3E%3C/svg%3E");
  background-color: currentColor;
  -webkit-mask-image: var(--svg);
  mask-image: var(--svg);
  -webkit-mask-repeat: no-repeat;
  mask-repeat: no-repeat;
  -webkit-mask-size: 100% 100%;
  mask-size: 100% 100%;
}
</style>

<script>
    // Function to filter incident cards based on search input
    function filterIncidents() {
        const searchInput = document.getElementById('searchInput');
        const searchValue = searchInput.value.trim().toLowerCase();
        const cardContainers = document.querySelectorAll('.card-container');

        cardContainers.forEach(container => {
            const title = container.dataset.title;
            const card = container.closest('.col-md-4');

            if (title.includes(searchValue)) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    }

    // Add event listener for input change
    document.getElementById('searchInput').addEventListener('input', filterIncidents);


    function confirmReport(incidentId) {
        // Ask for confirmation
        if (confirm("Are you sure you want to report this incident?")) {
            reportIncident(incidentId);
        } else {
            console.log("Incident reporting cancelled.");
        }
    }
   // Define a variable to keep track of report counts for each incident
    const reportCounts = {};

    // Function to report an incident
    function reportIncident(incidentId) {
        // Check if the incidentId exists in reportCounts, if not, initialize it to 1
        if (!reportCounts[incidentId]) {
            reportCounts[incidentId] = 1;
        } else {
            // If incidentId exists, increment the count
            reportCounts[incidentId]++;
        }

        console.log(`Incident ${incidentId} has been reported ${reportCounts[incidentId]} times.`);
        
        if (reportCounts[incidentId] === 3) {
                deleteIncident(incidentId);
        }
        // Call a function to update the UI with the new report count
        updateReportCount(incidentId, reportCounts[incidentId]);
        }

        function deleteIncident(incidentId) {
        const url = `/incident/delete-incident/${incidentId}`;

        fetch(url, {
            method: 'POST', // Change method to POST
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest', // Indicate AJAX request
                'X-CSRF-TOKEN': '{{ csrf_token('delete_incident') }}' // Assuming 'delete_incident' is the token ID
            }
        })
        .then(response => {
            if (response.ok) {
                console.log('Incident deleted successfully');
                window.location.reload();
                // Optionally, you can remove the incident from the UI
            } else {
                console.error('Failed to delete incident');
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }

       

    // Function to update the report count in the UI
    function updateReportCount(incidentId, count) {
        // Find the element in the UI with the matching incidentId
        const incidentElement = document.querySelector(`[data-incident-id="${incidentId}"]`);

        // Update the text of the element to display the new count
        if (incidentElement) {
            incidentElement.textContent = `Report (${count})`;
        }
        console.log()
    }


    
</script>

{% endblock %}
